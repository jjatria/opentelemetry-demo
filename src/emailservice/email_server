#!/usr/bin/env perl

# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

use Mojolicious::Lite -signatures;

use Email::Stuffer;
use Log::Any::Adapter 'OpenTelemetry';
use Metrics::Any::Adapter 'Stderr';
use OpenTelemetry -all;
use OpenTelemetry::SDK;
use OpenTelemetry::Constants -span;

# Only to increase tested surface
use HTTP::Tiny;
use Mojo::SQLite;
use OpenTelemetry::Integration qw( DBI HTTP::Tiny );

plugin 'OpenTelemetry';

# TODO: Send Mojo::Log output to Log::Any. Should this be
# its own separate distribution? Like, an actually working version
# of the spirit of the failed MojoX::Log::Any
use Log::Any '$logger';
app->log->on( message => sub ( $, $level, @lines ) {
    $logger->$level( join ' ', @lines );
});

# To test SQL integration
helper sql => sub { state $sql = Mojo::SQLite->new; $sql };
app->sql->migrations->name('test')->from_string(<<'EOF')->migrate;
-- 1 up
create table known_emails (id integer primary key autoincrement, email text);
-- 1 down
drop table known_emails;
EOF

post '/send_order_confirmation' => sub ($c) {
  my $data = $c->req->json;

  # Get the current auto-instrumented span
  my $span = otel_span_from_context
        ->set_attribute( 'app.order.id' => $data->{order}{order_id} );

  my $body = $c->render_to_string(
    template => 'confirmation',
    order    => $data->{order} ,
  );

  $span->add_event( name => 'template rendered' );

  send_email(
    to        => $data->{email},
    html_body => $body,
  );

  # To test HTTP::Tiny integration
  my $res = HTTP::Tiny->new->get('http://httpbin/anything');
  app->log->debug('Call was ' . $res->{status});

  $c->rendered(200);
};

sub send_email (%args) {
  my $data = {
    from      => 'noreply@example.com',
    subject   => 'Your confirmation email',
    transport => 'Test',
    %args,
  };

  # Create and start a manual span
  my $tracer = otel_tracer_provider->tracer( name => 'emailservice' );

  $tracer->in_span( send_email => sub ($span, $context) {
    Email::Stuffer->new($data)->send;

    $span
        ->add_event( name => 'email sent' )
        ->set_attribute( 'app.email.recipient' => $data->{to} );

    app->log->info("Order confirmation email sent to: $data->{to}");

    # To test SQL integration
    my $seen = app->sql->db
      ->select( known_emails => ['id'] => { email => $data->{to} } )
      ->arrays
      ->size;

    if ($seen) {
        app->log->trace("$data->{to} is a known email");
    }
    else {
        app->log->warn("$data->{to} is a new email");
        app->sql->db
          ->insert( known_emails => { email => $data->{to} } )
          ->last_insert_id;
    }
  });

  # Manually created spans need to be ended
  # In Perl, the method `in_span` ends them automatically
  # Check out the OpenTelemetry Perl docs at:
  # https://metacpan.org/dist/OpenTelemetry/view/lib/OpenTelemetry/Trace/Tracer.pod#create_span
}

app->start;
